// src / services / packingListService.jsx
import axios from 'axios';

// Get the base URL from environment variables or default to localhost
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// Helper to get auth headers
const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  // Warning moved to individual service calls if token is required
  return {
    headers: {
      'Content-Type': 'application/json',
      'x-auth-token': token || '' // Always include header, backend checks token validity
    }
  };
};

// Fetch the packing list for a specific trip
export const getPackingList = async (tripId) => {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
        console.error('No auth token found for getPackingList');
        // Depending on desired flow, throw error or return empty
         throw new Error('Authentication required.');
    }
    console.log(`Fetching packing list for trip ${tripId} from ${API_URL}/projects/${tripId}/packing-list`);
    const headers = getAuthHeaders();

    const response = await axios.get(
      `${API_URL}/projects/${tripId}/packing-list`,
      headers
    );
    console.log('Packing list API response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error fetching packing list:', error.response?.data || error.message);
     if (error.response && error.response.status === 401) {
        // Handle unauthorized specifically, e.g., redirect to login
         // toast.error('Unauthorized access to packing list.'); // Use toast if available
         // Redirect logic usually happens higher up (e.g., PrivateRoute or API interceptor)
     }
    throw error;
  }
};

// Update the packing list for a specific trip (replaces the entire list)
export const updatePackingList = async (tripId, packingList) => {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
        console.error('No auth token found for updatePackingList');
         throw new Error('Authentication required.');
    }
    console.log(`Updating packing list for trip ${tripId}`);
    console.log('Payload:', packingList);

    const headers = getAuthHeaders();

    const response = await axios.put(
      `${API_URL}/projects/${tripId}/packing-list`,
      packingList, // Send the entire list
      headers
    );
    console.log('Update response:', response.data);
    return response.data; // Backend returns the updated list
  } catch (error) {
    console.error('Error updating packing list:', error.response?.data || error.message);
    if (error.response && error.response.status === 401) {
        // toast.error('Unauthorized to update packing list.');
     } else if (error.response && error.response.status === 403) {
        // toast.error('You do not have permission to update the packing list.');
     }
    throw error;
  }
};

// NOTE: The methods below (add, toggle, remove) rely on getPackingList and updatePackingList.
// This works, but is less efficient than dedicated backend endpoints for each action
// if your list gets very large. Given the current PUT updates the whole list anyway,
// this pattern is consistent with the backend approach.

// Add a new item to the packing list
export const addPackingItem = async (tripId, item) => {
  try {
    console.log(`Attempting to add item to packing list for trip ${tripId}:`, item);
    const currentList = await getPackingList(tripId); // Fetch current list
    const newItemObj = { // Create the new item object (without server-generated _id)
        item: item.item,
        isPacked: item.isPacked || false,
        // _id will be generated by Mongoose on save
    };
    const updatedList = [...currentList, newItemObj]; // Add the new item
    const response = await updatePackingList(tripId, updatedList); // Send the full updated list back
    return response; // Returns the new full list from the server, including generated _id
  } catch (error) {
    console.error('Error adding packing item:', error.response?.data || error.message);
    throw error;
  }
};

// Toggle an item's packed status
export const togglePackingItem = async (tripId, itemId) => {
  try {
    console.log(`Attempting to toggle packed status for item ${itemId} in trip ${tripId}`);
    const currentList = await getPackingList(tripId); // Fetch current list
    const updatedList = currentList.map(item =>
      // Match using item._id
      item._id === itemId ? { ...item, isPacked: !item.isPacked } : item
    );
    const response = await updatePackingList(tripId, updatedList); // Send the full updated list back
    return response; // Returns the new full list from the server
  } catch (error) {
    console.error('Error toggling packing item:', error.response?.data || error.message);
    throw error;
  }
};

// Remove an item from the packing list
export const removePackingItem = async (tripId, itemId) => {
  try {
    console.log(`Attempting to remove item ${itemId} from packing list for trip ${tripId}`);
    const currentList = await getPackingList(tripId); // Fetch current list
    // Filter out the item using item._id
    const updatedList = currentList.filter(item => item._id !== itemId);
    const response = await updatePackingList(tripId, updatedList); // Send the full updated list back
    return response; // Returns the new full list from the server
  } catch (error) {
    console.error('Error removing packing item:', error.response?.data || error.message);
    throw error;
  }
};


const packingListService = {
  getPackingList,
  updatePackingList,
  addPackingItem, // Although updatePackingList is used internally, keeping these might be useful
  togglePackingItem,
  removePackingItem
};

export default packingListService;